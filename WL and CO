# WL Code
import pandas as pd
import numpy as np

def handeyetogether(urlhand, urleye, windowlength):
  eye_data=pd.read_excel(urleye)
  hand_data=pd.read_excel(urlhand)
  eye=eye_data.copy()
  hand=hand_data.copy()
  np.array(eye)
  np.array(hand)
  starttime= min(np.min(hand['start']), np.min(eye['start']))
  hand['start']+=-starttime
  hand['end']+=-starttime
  eye['start']+=-starttime
  eye['end']+=-starttime
  endtime=max(np.max(hand['start']), np.max(eye['start']))
  intervals=int(endtime//windowlength)
  currenttime=0
  eyearray=np.zeros((intervals, 2))
  handarray=np.zeros((intervals, 2))
  for i in range(eye.shape[0]-1):
    for j in range(int(eye.loc[i].start//windowlength), int(eye.loc[i+1].start//windowlength)):
      eyearray[j][0]=eye.loc[i].x
      eyearray[j][1]=eye.loc[i].y
  for k in range(int(eye.loc[eye.shape[0]-1].start//windowlength), intervals):
    eyearray[k][0]=eye.loc[eye.shape[0]-1].x
    eyearray[k][1]=eye.loc[eye.shape[0]-1].y
  for l in range(hand.shape[0]-1):
    for m in range(int(hand.loc[l].start//windowlength), int(hand.loc[l+1].start//windowlength)):
      handarray[m][0]=hand.loc[l].x
      handarray[m][1]=hand.loc[l].y
  for n in range(int(hand.loc[hand.shape[0]-1].start//windowlength), intervals):
    handarray[n][0]=hand.loc[hand.shape[0]-1].x
    handarray[n][1]=hand.loc[hand.shape[0]-1].y
  return eyearray, handarray

# Forms training data for LSTM and GRU
import pandas as pd
import numpy as np

def generate_sequences_together(user_type,win_len):
  resulteye=[]
  resulthand=[]
  maxlen=0
  eye_basic_url='/content/drive/My Drive/data_set/Eye_'
  hand_basic_url='/content/drive/My Drive/data_set/Hand_'
  if (user_type=='ASD'):
    numOfUser=9
    eye_basic_url+="ASD_"
    hand_basic_url+='ASD_'
  else:
    eye_basic_url+="TD_"
    hand_basic_url+='TD_'
    numOfUser=17
  for i in range(1, numOfUser+1):
    for j in range(0,2):
      c_eye_url=eye_basic_url+'U'+str(i)+"_Active_"+str(j)+".xlsx"
      c_hand_url=hand_basic_url+'U'+str(i)+"_Active_"+str(j)+".xlsx"
      #asd_eye_data=pd.DataFrame()
      try:
        dataeye, datahand =handeyetogether(c_hand_url, c_eye_url, win_len)
        resulteye.append(dataeye)
        resulthand.append(datahand)
        if len(dataeye)>maxlen or len(datahand)>maxlen:
          maxlen=max(len(dataeye), len(datahand))
      except IOError:
        print("")
  return resulteye, resulthand, maxlen

# Forms training data for E/H Approach
import pandas as pd
import numpy as np

def plainsequences(user_type):
  resulteye=[]
  resulthand=[]
  maxlen=0
  eye_basic_url='/content/drive/My Drive/data_set/Eye_'
  hand_basic_url='/content/drive/My Drive/data_set/Hand_'
  if (user_type=='ASD'):
    numOfUser=9
    eye_basic_url+="ASD_"
    hand_basic_url+='ASD_'
  else:
    eye_basic_url+="TD_"
    hand_basic_url+='TD_'
    numOfUser=17
  for i in range(1, numOfUser+1):
    for j in range(0,2):
      c_eye_url=eye_basic_url+'U'+str(i)+"_Active_"+str(j)+".xlsx"
      c_hand_url=hand_basic_url+'U'+str(i)+"_Active_"+str(j)+".xlsx"
      #asd_eye_data=pd.DataFrame()
      try:
        asd_eye_data=pd.read_excel(c_eye_url)
        asd_hand_data=pd.read_excel(c_hand_url)
        resulteye.append(asd_eye_data[['x','y']].to_numpy())
        resulthand.append(asd_hand_data[['x','y']].to_numpy())
        c_max_length=max(asd_eye_data.shape[0], asd_hand_data.shape[0])
        if c_max_length>maxlen:
          maxlen=c_max_length
      except IOError:
        print("")
  return resulteye, resulthand, maxlen
